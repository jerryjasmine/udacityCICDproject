name: frontend CD Workflow

on:
  pull_request:
    branches:
      - main
    paths:
    - 'starter/frontend/**'
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: 'main'
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    #needs: lint  # Ensures that the test job waits for the lint job to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (or other language/runtime if needed)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd starter/frontend 
          npm install

      - name: Run tests
        run: |
          cd starter/frontend 
          npm test
  
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-east-1"
    needs: test  # Ensures the build job waits for both lint and test jobs to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Print AWS Region
        run: |
          echo "AWS Region: ${AWS_REGION}"

      - name: Log in to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${AWS_REGION}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key

      - name: Build Docker image
        run: |
          # Define the ECR repository and image details
          REPOSITORY_URI=${{ secrets.FRONTEND_ECR_REPOSITORY_URI }}
          IMAGE_NAME=frontendapp
          GIT_SHA=${{ github.sha }}
          TAGGED_IMAGE="${IMAGE_NAME}:${REPOSITORY_URI}:${GIT_SHA}"

          # Build the Docker image
          docker build -t $TAGGED_IMAGE .
      
      - name: Push Docker image to ECR
        run: |
          # Push the image tagged with Git SHA
          docker push $TAGGED_IMAGE
  
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensures the build job waits for both lint and test jobs to complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'  # Adjust as needed
      
      - name: Set up Kustomize
        run: |
          KUSTOMIZE_VERSION=4.5.7  # Specify the Kustomize version
          curl -sLO "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v$KUSTOMIZE_VERSION/kustomize_v$KUSTOMIZE_VERSION_linux_amd64.tar.gz"
          tar xzf kustomize_v$KUSTOMIZE_VERSION_linux_amd64.tar.gz
          sudo mv kustomize /usr/local/bin/

      # - name: Configure kubectl
      #   run: |
      #     aws eks --region us-east-1 update-kubeconfig --name cluster

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s 
          IMAGE_NAME=frontendapp
          GIT_SHA=${{ github.sha }}
          REPOSITORY_URI=${{ secrets.FRONTEND_ECR_REPOSITORY_URI }}
          TAGGED_IMAGE="${IMAGE_NAME}:${REPOSITORY_URI}:${GIT_SHA}"
          kustomize edit set image frontend=${TAGGED_IMAGE}
          kustomize build | kubectl apply -f ./kustomization.yaml